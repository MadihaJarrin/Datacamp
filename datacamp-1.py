# -*- coding: utf-8 -*-
"""datacamp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yZtD9IyRLveTsRCw1gCnIpp9E9RGZF-N
"""

!pip install scikit-learn matplotlib seaborn

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score
from sklearn.preprocessing import StandardScaler, LabelEncoder

df = pd.read_csv('/content/RTA Data 2020 to July 2023 (1).csv')

df.head

df.tail

df.shape

df.info()

#finding missing value
df.isnull().sum()

#percentage of missing value
df.isnull().sum()/df.shape[0]*100

#drop high missing value
threshold = 25
df.dropna(thresh=int(df.shape[0]*(1 - threshold / 100)), axis = 1 )

#finding duplicates
df.duplicated().sum()

#remove duplicates values
df.drop_duplicates()

# Check number of rows before and after
print("Rows before removing duplicates:", len(df))
df = df.drop_duplicates()
print("Rows after removing duplicates:", len(df))

df.duplicated().sum()

#finding garbage value
for i in df.select_dtypes(include="object").columns:
  print(df[i].value_counts())
  print("***"*10)

# Normalize entries to lowercase and strip any whitespace
df['PatientStatus'] = df['PatientStatus'].str.lower().str.strip()

# Display unique values after normalization
print(df['PatientStatus'].value_counts())

#data analysis (descriptive statistics)
df.describe().T

df.describe(include="object")

#histogram to understand the distribution
import warnings
warnings.filterwarnings("ignore")
for i in df.select_dtypes(include="number").columns:
  sns.histplot(data=df, x=i)
  plt.show()

#boxplot to identify the outliyers
import warnings
warnings.filterwarnings("ignore")
for i in df.select_dtypes(include="number").columns:
  sns.boxplot(data=df, x=i)
  plt.show()

#scatter plot to understand relationship
for i in ['Gender', 'Age', 'HospitalName', 'Reason', 'responsetime',
       'PatientStatus', 'BicycleInvovled', 'BikesInvolved', 'BusesInvolved',
       'CarsInvolved', 'CartInvovled', 'RickshawsInvolved', 'TractorInvovled',
       'TrainsInvovled', 'TrucksInvolved', 'VansInvolved', 'OthersInvolved']:
       sns.scatterplot(data = df, x = i, y= 'InjuryType')
       plt.title(f'Scatter Plot of {i} vs InjuryType')
       plt.xlabel(i)
       plt.ylabel('InjuryType')
       plt.show()

for i in ['Gender', 'Age', 'HospitalName', 'Reason', 'responsetime', 'InjuryType',
        'BicycleInvovled', 'BikesInvolved', 'BusesInvolved',
       'CarsInvolved', 'CartInvovled', 'RickshawsInvolved', 'TractorInvovled',
       'TrainsInvovled', 'TrucksInvolved', 'VansInvolved', 'OthersInvolved']:
       sns.scatterplot(data = df, x = i, y= 'PatientStatus')
       plt.title(f'Scatter Plot of {i} vs PatientStatus')
       plt.xlabel(i)
       plt.ylabel('PatientStatus')
       plt.show()

df.select_dtypes(include="number").columns

#corelation with heatamp to interpret the relation
s = df.select_dtypes(include="number").corr()

plt.figure(figsize=(15,15))
sns.heatmap(s, annot = True)

df.dtypes

#fill missing value
for i in ["Gender","Age","HospitalName","Reason", "responsetime","BicycleInvovled", "BikesInvolved", "BusesInvolved", "CarsInvolved",
          "CartInvovled", "RickshawsInvolved","TractorInvovled","TrainsInvovled","TrucksInvolved", "VansInvolved", "OthersInvolved"]:
          df[i].fillna(df[i].median(), inplace=True)

from sklearn.impute import KNNImputer
impute=KNNImputer()

for i in df.select_dtypes(include="number").columns:
  df[i]=impute.fit_transform(df[[i]])

df.isnull().sum()

#Outliers
def wisker(col):
  q1, q3=np.percentile(col,[25,75])
  iqr=q3-q1
  lw=q1-1.5*iqr
  uw=q3+1.5*iqr
  return lw,uw

wisker(df["responsetime"])

for i in ['responsetime', 'TotalPatientsInEmergency', 'Age', 'BicycleInvovled', 'BikesInvolved', 'BusesInvolved', 'CarsInvolved',
          'RickshawsInvolved', 'TractorInvovled', 'TrainsInvovled', 'TrucksInvolved', 'VansInvolved', 'OthersInvolved']:
          lw, uw = wisker(df[i])
          df[i] = np.where(df[i] < lw, lw, df[i])
          df[i] = np.where(df[i]> uw, uw, df[i])

for i in ['responsetime', 'TotalPatientsInEmergency', 'Age', 'BicycleInvovled', 'BikesInvolved', 'BusesInvolved', 'CarsInvolved',
          'RickshawsInvolved', 'TractorInvovled', 'TrainsInvovled', 'TrucksInvolved', 'VansInvolved', 'OthersInvolved']:
          sns.boxplot(df[i])
          plt.show()

df.columns

#encode categorical data
pd.get_dummies(data=df, columns=['Gender', 'HospitalName', 'Reason', 'InjuryType', 'PatientStatus'], drop_first=True)

